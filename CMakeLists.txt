cmake_minimum_required(VERSION 2.6)
project(KamiCmd)

set(TARGET_NAME KamiCmd)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})

# ************
# PACKAGE VERSION
set(VERSION_MAJOR "0")
set(VERSION_MINOR "0")
set(VERSION_PATCH "50")
# ************

FIND_PACKAGE(Mercurial)
IF(MERCURIAL_FOUND)
    MERCURIAL_HG_INFO(${PROJECT_SOURCE_DIR} Project)
    MESSAGE("Current revision is ${Project_HG_ID}")
    set(VERSION_PATCH "${Project_HG_ID}")
ENDIF(MERCURIAL_FOUND)

include(Internal)
include(qt4_wrap_ts)
include(KamiCmdModuleDev)


find_package (Qt4 REQUIRED)
set(QT_USE_QTGUI TRUE)
set(QT_USE_QTWEBKIT TRUE)
set(QT_USE_QPLUGIN TRUE)
set(QT_USE_QTCORE TRUE)
include (${QT_USE_FILE})

if (WIN32)
set(CMAKE_EXTRA_CXX_FLAGS "/Zc:wchar_t-" CACHE STRING "Extra CXX options")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_EXTRA_CXX_FLAGS}")

add_definitions(
	-DUNICODE
)
endif()

add_subdirectory(3rdparty)

SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE) 
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${INSTALL_LIB_DIR}")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
   SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/${INSTALL_LIB_DIR}")
ENDIF("${isSystemDir}" STREQUAL "-1")

include_directories(${3RDPARTY_INCLUDES})

add_subdirectory(src)

if(WIN32)
install(FILES 
	"${QT_LIBRARY_DIR}/QtCore${QT_VERSION_MAJOR}.dll"
	"${QT_LIBRARY_DIR}/QtXml${QT_VERSION_MAJOR}.dll"
	"${QT_LIBRARY_DIR}/QtWebKit${QT_VERSION_MAJOR}.dll"
	"${QT_LIBRARY_DIR}/QtGui${QT_VERSION_MAJOR}.dll"
	"${QT_LIBRARY_DIR}/QtNetwork${QT_VERSION_MAJOR}.dll"
	"${QT_LIBRARY_DIR}/QtScript${QT_VERSION_MAJOR}.dll"
	"${QT_LIBRARY_DIR}/QtNetwork${QT_VERSION_MAJOR}.dll"
	"${QT_LIBRARY_DIR}/phonon4.dll"
	DESTINATION ${INSTALL_LIB_DIR}
)

endif()


if (UNIX OR APPLE)
set(CPACK_BINARY_STGZ true)
set(CPACK_BINARY_TGZ true)
set(CPACK_BINARY_TZ true)
set(CPACK_BINARY_TBZ2 true)
endif()

set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/ABOUT")
set(CPACK_PACKAGE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README")
set(CPACK_PACKAGE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_PACKAGE_DESCRIPTION "File manager")
set(CPACK_PACKAGE_FILE_NAME "KamiCmd-${VERSION_MAJOR}.${VERSION_MINOR}-${VERSION_PATCH}")
#set(CPACK_PACKAGE_INSTALL_DIRECTORY "/usr/")
set(CPACK_PACKAGE_VENDOR "KamiCmd")
set(CPACK_VERSION_MAJOR ${VERSION_MAJOR})
set(CPACK_VERSION_MINOR ${VERSION_MINOR})
set(CPACK_VERSION_PATCH ${VERSION_PATCH})
set(CPACK_SYSTEM_NAME "${CMAKE_HOST_SYSTEM}")

if (WIN32)
set(CPACK_BINARY_NSIS true)
set(CPACK_NSIS_MUI_ICON "${CMAKE_CURRENT_SOURCE_DIR}/src/KamiCmd/KamiCmd.ico")
set(CPACK_NSIS_INSTALLED_ICON_NAME "${INSTALL_BIN_DIR}/KamiCmd.exe")
#set(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}/src/KamiCmd/KamiCmd.png")
set(CPACK_NSIS_DISPLAY_NAME "KamiCmd")
set(CPACK_NSIS_PACKAGE_NAME "KamiCmd")
#CPACK_PACKAGE_INSTALL_REGISTRY_KEY
endif()

include(CPack)

 


